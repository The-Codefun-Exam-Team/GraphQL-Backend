// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CodefunSubmissionResult interface {
	IsCodefunSubmissionResult()
}

type Group interface {
	IsGroup()
	GetID() *int
	GetName() *string
	GetCardinality() int
}

type NewProblemReturn interface {
	IsNewProblemReturn()
}

type User interface {
	IsUser()
	GetID() int
	GetName() string
	GetUsername() string
	GetAvatar() string
}

type CodefunCompileErrorMsg struct {
	Message *string `json:"message"`
}

func (CodefunCompileErrorMsg) IsCodefunSubmissionResult() {}

type CodefunGroup struct {
	ID           *int           `json:"id"`
	Name         *string        `json:"name"`
	Cardinality  int            `json:"cardinality"`
	Participants []*CodefunUser `json:"participants"`
}

func (CodefunGroup) IsGroup()                 {}
func (this CodefunGroup) GetID() *int         { return this.ID }
func (this CodefunGroup) GetName() *string    { return this.Name }
func (this CodefunGroup) GetCardinality() int { return this.Cardinality }

type CodefunProblem struct {
	ID        int              `json:"id"`
	Name      string           `json:"name"`
	Pcode     string           `json:"pcode"`
	Setter    *CodefunUser     `json:"setter"`
	Score     int              `json:"score"`
	Scoretype CodefunScoreType `json:"scoretype"`
	Pgroup    string           `json:"pgroup"`
	Statement string           `json:"statement"`
	Timelimit float64          `json:"timelimit"`
	Solved    int              `json:"solved"`
	Attempted int              `json:"attempted"`
}

type CodefunSubmission struct {
	ID         int                      `json:"id"`
	Problem    *CodefunProblem          `json:"problem"`
	Lang       Lang                     `json:"lang"`
	Owner      *CodefunUser             `json:"owner"`
	Exectime   float64                  `json:"exectime"`
	Submittime int                      `json:"submittime"`
	Score      float64                  `json:"score"`
	Scored     bool                     `json:"scored"`
	Result     CodefunSubmissionVerdict `json:"result"`
	// Written solution code
	Code  *string                 `json:"code"`
	Judge CodefunSubmissionResult `json:"judge"`
}

type CodefunTestResult struct {
	Verdict  CodefunTestVerdict `json:"verdict"`
	Exectime float64            `json:"exectime"`
	Message  float64            `json:"message"`
}

type CodefunTestsetResult struct {
	Verdicts []*CodefunTestResult `json:"verdicts"`
}

func (CodefunTestsetResult) IsCodefunSubmissionResult() {}

type CodefunUser struct {
	ID          int                  `json:"id"`
	Name        string               `json:"name"`
	Username    string               `json:"username"`
	Avatar      string               `json:"avatar"`
	Role        CodefunUserType      `json:"role"`
	Group       *CodefunGroup        `json:"group"`
	Rank        int                  `json:"rank"`
	Ratio       float64              `json:"ratio"`
	Totalscore  float64              `json:"totalscore"`
	Solvedcount int                  `json:"solvedcount"`
	Solved      []*CodefunSubmission `json:"solved"`
}

func (CodefunUser) IsUser()                  {}
func (this CodefunUser) GetID() int          { return this.ID }
func (this CodefunUser) GetName() string     { return this.Name }
func (this CodefunUser) GetUsername() string { return this.Username }
func (this CodefunUser) GetAvatar() string   { return this.Avatar }

type DebugGroup struct {
	ID          *int    `json:"id"`
	Name        *string `json:"name"`
	Cardinality int     `json:"cardinality"`
	// List of participants, sorted by rank.
	Participants []*DebugUser `json:"participants"`
}

func (DebugGroup) IsGroup()                 {}
func (this DebugGroup) GetID() *int         { return this.ID }
func (this DebugGroup) GetName() *string    { return this.Name }
func (this DebugGroup) GetCardinality() int { return this.Cardinality }

// Represents a debug problem
type DebugProblem struct {
	ID          *int               `json:"id"`
	Pcode       string             `json:"pcode"`
	Originalsub *CodefunSubmission `json:"originalsub"`
	// Best score of the user on this problem.
	Bestscore int `json:"bestscore"`
}

func (DebugProblem) IsNewProblemReturn() {}

type DebugSubmission struct {
	Problem *DebugProblem `json:"problem"`
	// Codefun submission corresponding to the debugged submission
	Codefunsubmission *CodefunSubmission `json:"codefunsubmission"`
	Editdist          float64            `json:"editdist"`
}

type DebugUser struct {
	ID       int         `json:"id"`
	Name     string      `json:"name"`
	Username string      `json:"username"`
	Avatar   string      `json:"avatar"`
	Rank     int         `json:"rank"`
	Points   float64     `json:"points"`
	Group    *DebugGroup `json:"group"`
}

func (DebugUser) IsUser()                  {}
func (this DebugUser) GetID() int          { return this.ID }
func (this DebugUser) GetName() string     { return this.Name }
func (this DebugUser) GetUsername() string { return this.Username }
func (this DebugUser) GetAvatar() string   { return this.Avatar }

type NewProblemErrorMsg struct {
	Message *string `json:"message"`
}

func (NewProblemErrorMsg) IsNewProblemReturn() {}

type CodefunScoreType string

const (
	// Partial scoring
	CodefunScoreTypeOi CodefunScoreType = "oi"
	// ICPC rules (Accepted on all tests)
	CodefunScoreTypeAcm CodefunScoreType = "acm"
)

var AllCodefunScoreType = []CodefunScoreType{
	CodefunScoreTypeOi,
	CodefunScoreTypeAcm,
}

func (e CodefunScoreType) IsValid() bool {
	switch e {
	case CodefunScoreTypeOi, CodefunScoreTypeAcm:
		return true
	}
	return false
}

func (e CodefunScoreType) String() string {
	return string(e)
}

func (e *CodefunScoreType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CodefunScoreType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CodefunScoreType", str)
	}
	return nil
}

func (e CodefunScoreType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CodefunSubmissionVerdict string

const (
	CodefunSubmissionVerdictAc  CodefunSubmissionVerdict = "AC"
	CodefunSubmissionVerdictCe  CodefunSubmissionVerdict = "CE"
	CodefunSubmissionVerdictDq  CodefunSubmissionVerdict = "DQ"
	CodefunSubmissionVerdictMle CodefunSubmissionVerdict = "MLE"
	CodefunSubmissionVerdictQ   CodefunSubmissionVerdict = "Q"
	CodefunSubmissionVerdictRte CodefunSubmissionVerdict = "RTE"
	CodefunSubmissionVerdictSs  CodefunSubmissionVerdict = "SS"
	CodefunSubmissionVerdictTle CodefunSubmissionVerdict = "TLE"
	CodefunSubmissionVerdictTo  CodefunSubmissionVerdict = "TO"
	CodefunSubmissionVerdictWa  CodefunSubmissionVerdict = "WA"
)

var AllCodefunSubmissionVerdict = []CodefunSubmissionVerdict{
	CodefunSubmissionVerdictAc,
	CodefunSubmissionVerdictCe,
	CodefunSubmissionVerdictDq,
	CodefunSubmissionVerdictMle,
	CodefunSubmissionVerdictQ,
	CodefunSubmissionVerdictRte,
	CodefunSubmissionVerdictSs,
	CodefunSubmissionVerdictTle,
	CodefunSubmissionVerdictTo,
	CodefunSubmissionVerdictWa,
}

func (e CodefunSubmissionVerdict) IsValid() bool {
	switch e {
	case CodefunSubmissionVerdictAc, CodefunSubmissionVerdictCe, CodefunSubmissionVerdictDq, CodefunSubmissionVerdictMle, CodefunSubmissionVerdictQ, CodefunSubmissionVerdictRte, CodefunSubmissionVerdictSs, CodefunSubmissionVerdictTle, CodefunSubmissionVerdictTo, CodefunSubmissionVerdictWa:
		return true
	}
	return false
}

func (e CodefunSubmissionVerdict) String() string {
	return string(e)
}

func (e *CodefunSubmissionVerdict) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CodefunSubmissionVerdict(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CodefunSubmissionVerdict", str)
	}
	return nil
}

func (e CodefunSubmissionVerdict) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CodefunTestVerdict string

const (
	CodefunTestVerdictAc  CodefunTestVerdict = "AC"
	CodefunTestVerdictWa  CodefunTestVerdict = "WA"
	CodefunTestVerdictMle CodefunTestVerdict = "MLE"
	CodefunTestVerdictRte CodefunTestVerdict = "RTE"
	CodefunTestVerdictTle CodefunTestVerdict = "TLE"
)

var AllCodefunTestVerdict = []CodefunTestVerdict{
	CodefunTestVerdictAc,
	CodefunTestVerdictWa,
	CodefunTestVerdictMle,
	CodefunTestVerdictRte,
	CodefunTestVerdictTle,
}

func (e CodefunTestVerdict) IsValid() bool {
	switch e {
	case CodefunTestVerdictAc, CodefunTestVerdictWa, CodefunTestVerdictMle, CodefunTestVerdictRte, CodefunTestVerdictTle:
		return true
	}
	return false
}

func (e CodefunTestVerdict) String() string {
	return string(e)
}

func (e *CodefunTestVerdict) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CodefunTestVerdict(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CodefunTestVerdict", str)
	}
	return nil
}

func (e CodefunTestVerdict) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CodefunUserType string

const (
	CodefunUserTypeAdmin   CodefunUserType = "Admin"
	CodefunUserTypeProblem CodefunUserType = "Problem"
	CodefunUserTypeSetter  CodefunUserType = "Setter"
	CodefunUserTypeNormal  CodefunUserType = "Normal"
	CodefunUserTypeBanned  CodefunUserType = "Banned"
)

var AllCodefunUserType = []CodefunUserType{
	CodefunUserTypeAdmin,
	CodefunUserTypeProblem,
	CodefunUserTypeSetter,
	CodefunUserTypeNormal,
	CodefunUserTypeBanned,
}

func (e CodefunUserType) IsValid() bool {
	switch e {
	case CodefunUserTypeAdmin, CodefunUserTypeProblem, CodefunUserTypeSetter, CodefunUserTypeNormal, CodefunUserTypeBanned:
		return true
	}
	return false
}

func (e CodefunUserType) String() string {
	return string(e)
}

func (e *CodefunUserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CodefunUserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CodefunUserType", str)
	}
	return nil
}

func (e CodefunUserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Supported languages
type Lang string

const (
	LangCpp    Lang = "Cpp"
	LangPython Lang = "Python"
)

var AllLang = []Lang{
	LangCpp,
	LangPython,
}

func (e Lang) IsValid() bool {
	switch e {
	case LangCpp, LangPython:
		return true
	}
	return false
}

func (e Lang) String() string {
	return string(e)
}

func (e *Lang) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Lang(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Lang", str)
	}
	return nil
}

func (e Lang) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
